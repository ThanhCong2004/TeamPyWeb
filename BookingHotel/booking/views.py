# booking/views.py (PHI√äN B·∫¢N ƒê√É S·ª¨A L·ªñI)

from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponse, JsonResponse
from .models import Hotel, User, Room, Booking, Payment, RoomPicture, Picture, Review
from django.contrib import messages
from django.contrib.auth import logout
from .forms import SearchForm, RegisterForm, ReviewForm
from django.utils import timezone
from datetime import datetime
from django.core.paginator import Paginator
from django.utils.timezone import now
import logging
import time
from django.db.models import Q
from django.conf import settings
from django.urls import reverse
from django.views.decorators.csrf import csrf_exempt
from django.db import transaction
import json
from payos import PayOS
from payos.type import PaymentData, ItemData
from payos.custom_error import PayOSError
import requests
import os
import re # <<< TH√äM M·ªöI: Import th∆∞ vi·ªán bi·ªÉu th·ª©c ch√≠nh quy ƒë·ªÉ ph√¢n t√≠ch chu·ªói

logger = logging.getLogger(__name__)

payos_client = None
if settings.PAYOS_CLIENT_ID and settings.PAYOS_API_KEY and settings.PAYOS_CHECKSUM_KEY:
    try:
        payos_client = PayOS(
            client_id=settings.PAYOS_CLIENT_ID,
            api_key=settings.PAYOS_API_KEY,
            checksum_key=settings.PAYOS_CHECKSUM_KEY
        )
        logger.info("PayOS client initialized successfully.")
    except Exception as e:
        logger.error(f"An unexpected error occurred during PayOS client initialization: {e}")
else:
    logger.warning("PAYOS credentials not found in settings. Payment via PayOS will not be available.")

# === C√ÅC VIEW CH√çNH (Gi·ªØ nguy√™n, kh√¥ng thay ƒë·ªïi) ===
def logout_view(request):
    logout(request)
    return redirect('home')

def login_view(request):
    if request.method == 'POST':
        email = request.POST['email']
        password = request.POST['password']
        try:
            user = User.objects.get(email=email, password=password)
            request.session['user_id'] = user.user_id
            return redirect('home')
        except User.DoesNotExist:
            messages.error(request, "Sai th√¥ng tin ƒëƒÉng nh·∫≠p")
    return render(request, 'login.html')

def register_view(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            latest_user = User.objects.order_by('-user_id').first()
            next_id = latest_user.user_id + 1 if latest_user else 1
            user = form.save(commit=False)
            user.user_id = next_id
            messages.success(request, "ƒêƒÉng k√Ω th√†nh c√¥ng!")
            return redirect('login')
    else:
        form = RegisterForm()
    return render(request, 'register.html', {'form': form})

def home(request):
    hotels = Hotel.objects.order_by('hotel_id')
    form = SearchForm(request.GET or None)

    if form.is_valid():
        keyword = form.cleaned_data.get('keyword', '').strip()
        city = form.cleaned_data.get('city', '')
        if keyword:
            hotels = hotels.filter(name__icontains=keyword)
        if city:
            hotels = hotels.filter(address__icontains=city)

    paginator = Paginator(hotels, 6)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    return render(request, 'home.html', {'hotels': page_obj, 'form': form})

def hotel_detail(request, hotel_id):
    hotel = get_object_or_404(Hotel, hotel_id=hotel_id)
    rooms = Room.objects.filter(hotel=hotel)
    pictures = Picture.objects.filter(hotel=hotel)
    return render(request, 'hotel_detail.html', {'hotel': hotel, 'rooms': rooms, 'pictures': pictures})

def user_profile(request):
    user_id = request.session.get('user_id')
    user = get_object_or_404(User, user_id=user_id)
    return render(request, 'profile.html', {'user': user})

def room_detail(request, room_id):
    room = get_object_or_404(Room, room_id=room_id)
    pictures = RoomPicture.objects.filter(room=room)
    reviews = Review.objects.filter(room=room).select_related('user').order_by('-created_at')
    user_id = request.session.get('user_id')
    user = User.objects.filter(user_id=user_id).first() if user_id else None

    if request.method == 'POST' and user:
        form = ReviewForm(request.POST)
        if form.is_valid():
            # ...
            pass
    else:
        form = ReviewForm()
    return render(request, 'room_detail.html', {'room': room, 'pictures': pictures, 'reviews': reviews, 'form': form, 'user': user})

# === H√ÄM ƒê√É S·ª¨A L·ªñI ===

def book_room(request, room_id):
    room = get_object_or_404(Room, room_id=room_id)
    if request.method == 'POST':
        check_in = request.POST.get('check_in')
        check_out = request.POST.get('check_out')
        user_id = request.session.get('user_id')
        if not user_id:
            return redirect('login')
        user = get_object_or_404(User, user_id=user_id)

        try:
            check_i = datetime.strptime(check_in, "%Y-%m-%d").date()
            check_o = datetime.strptime(check_out, "%Y-%m-%d").date()
            if (check_o - check_i).days <= 0:
                messages.error(request, 'Ng√†y tr·∫£ ph·∫£i sau ng√†y nh·∫≠n ph√≤ng.')
                return render(request, 'book_room.html', {'room': room})
        except (ValueError, TypeError):
            messages.error(request, 'Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng ng√†y.')
            return render(request, 'book_room.html', {'room': room})

        overlap = Booking.objects.filter(room=room, check_in__lt=check_o, check_out__gt=check_i).exists()
        if overlap:
            messages.error(request, "‚ùå Ph√≤ng n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong kho·∫£ng th·ªùi gian b·∫°n ch·ªçn.")
            return redirect('room_detail', room_id=room.room_id)

        nights = (check_o - check_i).days
        total = room.price_per_night * nights

        # <<< THAY ƒê·ªîI 1: S·ª≠a l·ªói t·∫°o booking_id l·∫∑p l·∫°i >>>
        # GI·∫¢I TH√çCH: Thay v√¨ d√πng max_id + 1 (d·ªÖ b·ªã l·∫∑p l·∫°i khi x√≥a),
        # ch√∫ng ta d√πng timestamp (s·ªë gi√¢y t√≠nh t·ª´ 1/1/1970) l√†m ID.
        # ID n√†y g·∫ßn nh∆∞ ch·∫Øc ch·∫Øn l√† duy nh·∫•t v√† kh√¥ng bao gi·ªù b·ªã l·∫∑p l·∫°i.
        new_id = int(time.time())

        # ƒê·∫£m b·∫£o ID n√†y ch∆∞a t·ªìn t·∫°i (tr∆∞·ªùng h·ª£p c·ª±c hi·∫øm 2 ng∆∞·ªùi ƒë·∫∑t c√πng 1 gi√¢y)
        while Booking.objects.filter(booking_id=new_id).exists():
            new_id += 1 # N·∫øu tr√πng th√¨ tƒÉng l√™n 1

        new_booking = Booking.objects.create(booking_id=new_id, user=user, room=room, check_in=check_i, check_out=check_o,
                               total=total)
        messages.success(request, f"üéâ ƒê·∫∑t ph√≤ng th√†nh c√¥ng (M√£ #{new_booking.booking_id})! Vui l√≤ng ti·∫øn h√†nh thanh to√°n.")
        return redirect('my_bookings')
    return render(request, 'book_room.html', {'room': room})


def my_bookings(request):
    user_id = request.session.get('user_id')
    if not user_id:
        return redirect('login')

    user = get_object_or_404(User, user_id=user_id)
    bookings_query = Booking.objects.filter(user=user).order_by('-booking_id')
    paid_booking_ids = Payment.objects.filter(booking__in=bookings_query).values_list('booking_id', flat=True)
    paid_booking_ids_set = set(paid_booking_ids)
    bookings_list = []
    for booking in bookings_query:
        booking.is_paid = booking.booking_id in paid_booking_ids_set
        booking.nights = (booking.check_out - booking.check_in).days or 1
        bookings_list.append(booking)

    return render(request, 'my_bookings.html', {'bookings': bookings_list})


def cancel_booking(request, booking_id):
    user_id = request.session.get('user_id')
    if not user_id:
        return redirect('login')
    booking = get_object_or_404(Booking, pk=booking_id, user_id=user_id)

    # <<< THAY ƒê·ªîI 2: NgƒÉn kh√¥ng cho h·ªßy ƒë∆°n ƒë√£ thanh to√°n >>>
    if Payment.objects.filter(booking=booking).exists():
        messages.error(request, f"Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng #{booking_id} ƒë√£ ƒë∆∞·ª£c thanh to√°n.")
        return redirect('my_bookings')

    if request.method == "POST":
        booking.delete()
        messages.success(request, f"ƒê√£ h·ªßy ƒë∆°n h√†ng #{booking_id} th√†nh c√¥ng.")
    return redirect('my_bookings')


def search_hotels(request):
    # D√πng l·∫°i logic t·ª´ h√†m home
    form = SearchForm(request.GET or None)
    hotels = Hotel.objects.order_by('hotel_id')
    if form.is_valid():
        keyword = form.cleaned_data.get('keyword')
        city = form.cleaned_data.get('city')
        if keyword:
            hotels = hotels.filter(name__icontains=keyword)
        if city:
            hotels = hotels.filter(address__icontains=city)
    return render(request, 'search.html', {'form': form, 'hotels': hotels})


# === C√ÅC VIEW X·ª¨ L√ù THANH TO√ÅN PAYOS (ƒê√É S·ª¨A L·ªñI HO√ÄN TO√ÄN) ===

# booking/views.py

# ... (c√°c h√†m kh√°c gi·ªØ nguy√™n) ...

# booking/views.py

# ... (c√°c h√†m kh√°c gi·ªØ nguy√™n) ...

def make_payment(request, booking_id):
    booking = get_object_or_404(Booking, booking_id=booking_id)

    if Payment.objects.filter(booking=booking).exists():
        messages.info(request, "ƒê∆°n h√†ng n√†y ƒë√£ ƒë∆∞·ª£c thanh to√°n r·ªìi.")
        return redirect('my_bookings')

    if request.method == 'POST':
        if not payos_client:
            messages.error(request, "D·ªãch v·ª• thanh to√°n hi·ªán kh√¥ng kh·∫£ d·ª•ng.")
            return render(request, 'make_payment.html', {'booking': booking})

        try:
            order_code = int(time.time() * 1000)

            # <<< THAY ƒê·ªîI QUAN TR·ªåNG >>>
            # T·∫°o m·ªôt chu·ªói description c·ª±c ng·∫Øn ƒë·ªÉ ch·ª©a ID, ƒë·∫£m b·∫£o d∆∞·ªõi 25 k√Ω t·ª±.
            # V√≠ d·ª•: "dh-1749495271" (dh l√† vi·∫øt t·∫Øt c·ªßa "ƒë∆°n h√†ng")
            description = f"dh-{booking.booking_id}"

            # C·∫Øt chu·ªói n·∫øu n√≥ d√†i h∆°n 25 k√Ω t·ª± (d√π r·∫•t kh√≥ x·∫£y ra v·ªõi c√°ch n√†y)
            description = description[:25]

            payment_data = PaymentData(
                orderCode=order_code,
                amount=int(booking.total*50),
                description=description,  # <-- S·ª≠ d·ª•ng m√¥ t·∫£ ng·∫Øn g·ªçn n√†y
                items=[ItemData(
                    name=f"Phong {booking.room.room_type}",
                    quantity=1,
                    price=int(booking.total*50)
                )],
                cancelUrl=request.build_absolute_uri(reverse('payment_cancel')),
                returnUrl=request.build_absolute_uri(reverse('payment_return')),
                buyerName=booking.user.name,
                buyerEmail=booking.user.email,
                buyerPhone=booking.user.phone,
                # B·ªè ƒëi tham s·ªë buyerData kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£
            )
            create_payment_result = payos_client.createPaymentLink(payment_data)

            if create_payment_result and create_payment_result.checkoutUrl:
                logger.info(f"PayOS link created for booking {booking_id} with orderCode {order_code}")
                return redirect(create_payment_result.checkoutUrl)
            else:
                messages.error(request, "L·ªói t·∫°o link thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.")

        except PayOSError as pe:
            logger.error(f"PayOS API Error for booking {booking_id}: {str(pe)}")
            messages.error(request, f"L·ªói t·ª´ PayOS: {str(pe)}")
        except Exception as e:
            logger.exception(f"General Error during PayOS link creation for booking {booking_id}: {e}")
            messages.error(request, "ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën. Vui l√≤ng th·ª≠ l·∫°i.")

    return render(request, 'make_payment.html', {'booking': booking})
@csrf_exempt
# booking/views.py

# ... (c√°c h√†m kh√°c gi·ªØ nguy√™n) ...

@csrf_exempt
# booking/views.py

# ... (c√°c h√†m kh√°c gi·ªØ nguy√™n) ...

@csrf_exempt
def payment_webhook_receiver(request):
    if request.method != 'POST' or not payos_client:
        return JsonResponse({'error': 'Invalid request'}, status=400)

    try:
        webhook_data = json.loads(request.body)
        logger.info(f"Received PayOS webhook: {json.dumps(webhook_data, indent=2)}")

        if webhook_data.get('code') == '00' and 'data' in webhook_data:
            data = webhook_data['data']
            order_code = data['orderCode']
            description = data.get('description', '')

            # <<< THAY ƒê·ªîI QUAN TR·ªåNG >>>
            # T√°ch booking_id t·ª´ chu·ªói description c√≥ d·∫°ng "dh-..."
            if description.startswith("dh-"):
                try:
                    # L·∫•y ph·∫ßn s·ªë sau k√Ω t·ª± "-"
                    booking_id_str = description.split('-')[1]
                    booking_id = int(booking_id_str)
                except (IndexError, ValueError):
                    logger.error(
                        f"Could not parse booking_id from description: '{description}' for order_code {order_code}")
                    return JsonResponse({'code': '02', 'desc': 'Order not found (Malformed description)'})
            else:
                logger.error(
                    f"Could not find booking_id pattern in description: '{description}' for order_code {order_code}")
                return JsonResponse({'code': '02', 'desc': 'Order not found (Invalid description pattern)'})

            # ƒêo·∫°n code x·ª≠ l√Ω sau khi ƒë√£ c√≥ booking_id gi·ªØ nguy√™n
            with transaction.atomic():
                try:
                    booking = Booking.objects.select_for_update().get(booking_id=booking_id)
                except Booking.DoesNotExist:
                    logger.error(f"Booking with ID {booking_id} not found in DB (from order_code {order_code}).")
                    return JsonResponse({'code': '02', 'desc': 'Order not found (DB)'})

                if Payment.objects.filter(booking=booking).exists():
                    logger.warning(
                        f"Payment for booking {booking_id} already processed. (from order_code {order_code})")
                    return JsonResponse({'code': '00', 'desc': 'Success (Already processed)'})

                new_payment_id = int(time.time())
                while Payment.objects.filter(payment_id=new_payment_id).exists():
                    new_payment_id += 1

                Payment.objects.create(
                    payment_id=new_payment_id,
                    booking=booking,
                    payment_method='PayOS',
                    payment_date=timezone.now().date(),
                    amount=booking.total*50,
                )
                logger.info(
                    f"SUCCESS: Payment record created for booking {booking_id} via webhook from order {order_code}.")

        return JsonResponse({'code': '00', 'desc': 'Success'})

    except Exception as e:
        logger.exception(f"Error processing PayOS webhook: {str(e)}")
        return JsonResponse({'code': '99', 'desc': 'Internal server error'})


# views.py

# booking/views.py

# ... (c√°c h√†m kh√°c gi·ªØ nguy√™n) ...

# booking/views.py

# ... (c√°c h√†m kh√°c gi·ªØ nguy√™n) ...

def payment_return_page(request):
    """
    X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ƒë∆∞·ª£c PayOS chuy·ªÉn h∆∞·ªõng v·ªÅ.
    √Åp d·ª•ng logic gi·∫£ l·∫≠p webhook t·ª´ view1 (products/views.py) cho m√¥i tr∆∞·ªùng test.
    """
    order_code_str = request.GET.get('orderCode')
    status_from_gateway = request.GET.get('status')
    code_from_gateway = request.GET.get('code')

    # <<< THAY ƒê·ªîI THEN CH·ªêT: L·∫•y booking_id tr·ª±c ti·∫øp t·ª´ description c·ªßa ch√≠nh ƒë∆°n h√†ng >>>
    # Logic n√†y kh√¥ng c·∫ßn g·ªçi API c·ªßa PayOS, do ƒë√≥ s·∫Ω kh√¥ng b·ªã l·ªói AttributeError
    booking = None
    try:
        # Ch√∫ng ta kh√¥ng c√≥ order_code_str trong tr∆∞·ªùng h·ª£p c·ªßa booking,
        # nh∆∞ng ch√∫ng ta c·∫ßn m·ªôt c√°ch ƒë·ªÉ t√¨m l·∫°i booking.
        # M·ªôt c√°ch l√† t√¨m ƒë∆°n h√†ng cu·ªëi c√πng ch∆∞a thanh to√°n c·ªßa user.
        # C√°ch n√†y c√≥ r·ªßi ro n·∫øu user m·ªü nhi·ªÅu tab thanh to√°n.
        # => Ch√∫ng ta s·∫Ω gi·ªØ logic c≈© l√† t√¨m trong description, nh∆∞ng th·ª±c hi·ªán n√≥ ngay t·∫°i ƒë√¢y.

        # ƒê·ªÉ t√¨m l·∫°i booking, ch√∫ng ta c·∫ßn duy·ªát qua c√°c ƒë∆°n h√†ng ch∆∞a thanh to√°n c·ªßa user.
        # ƒê√¢y l√† m·ªôt ƒëi·ªÉm y·∫øu c·ªßa quick fix, webhook th·∫≠t v·∫´n l√† t·ªët nh·∫•t.
        # Tuy nhi√™n, ƒë·ªÉ gi·∫£ l·∫≠p, ch√∫ng ta s·∫Ω gi·∫£ ƒë·ªãnh ƒë∆°n h√†ng cu·ªëi c√πng l√† ƒë∆°n h√†ng c·∫ßn x·ª≠ l√Ω.

        # L·∫•y description t·ª´ PayOS API ƒë·ªÉ t√¨m booking_id - B·ªè c√°ch n√†y v√¨ g√¢y l·ªói.

        # >>> GI·∫¢I PH√ÅP M·ªöI: T√åM L·∫†I BOOKING ID M√Ä KH√îNG C·∫¶N G·ªåI API <<<
        # D·ª±a tr√™n `orderCode`, ch√∫ng ta s·∫Ω t√¨m l·∫°i `description` ƒë√£ g·ª≠i ƒëi.
        # R·∫•t ti·∫øc, PayOS kh√¥ng cung c·∫•p c√°ch l√†m n√†y tr·ª±c ti·∫øp tr√™n trang return.
        # ƒê√¢y l√† l√∫c logic c·ªßa view1 t·ªè ra v∆∞·ª£t tr·ªôi: n√≥ c√≥ order_id (booking_id) trong orderCode.

        # => CH√öNG TA S·∫º N√ÇNG C·∫§P LOGIC T·∫†O LINK ƒê·ªÇ GI·ªêNG VIEW1
        # Trong make_payment, orderCode S·∫º L√Ä booking_id.
        pass  # S·∫Ω s·ª≠a ·ªü d∆∞·ªõi.

    except Exception as e:
        logger.error(f"Error finding booking on return page: {e}")
        messages.error(request, "Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ƒë∆°n h√†ng ƒë·ªÉ c·∫≠p nh·∫≠t.")
        return redirect('my_bookings')

    # =======================================================================
    # === B·∫ÆT ƒê·∫¶U BLOCK GI·∫¢ L·∫¨P WEBHOOK (L·∫§Y C·∫¢M H·ª®NG T·ª™ VIEW1) ===
    # =======================================================================
    if settings.DEBUG and code_from_gateway == '00' and status_from_gateway == 'PAID':
        # ƒê·ªÉ gi·∫£ l·∫≠p ƒë∆∞·ª£c, ch√∫ng ta c·∫ßn t√¨m ra booking_id.
        # V√¨ booking_id kh√¥ng c√≥ trong URL tr·∫£ v·ªÅ, ch√∫ng ta ph·∫£i d√πng m·ªôt m·∫πo:
        # T√¨m ƒë∆°n ƒë·∫∑t ph√≤ng g·∫ßn nh·∫•t c·ªßa user n√†y m√† ch∆∞a ƒë∆∞·ª£c thanh to√°n.
        user_id = request.session.get('user_id')
        if user_id:
            try:
                # L·∫•y danh s√°ch ID c√°c ƒë∆°n ƒë√£ thanh to√°n
                paid_booking_ids = Payment.objects.filter(booking__user_id=user_id).values_list('booking_id', flat=True)

                # T√¨m ƒë∆°n h√†ng g·∫ßn nh·∫•t ch∆∞a c√≥ trong danh s√°ch ƒë√£ thanh to√°n
                booking_to_update = Booking.objects.filter(
                    user_id=user_id
                ).exclude(
                    booking_id__in=paid_booking_ids
                ).latest('booking_id')  # L·∫•y ƒë∆°n m·ªõi nh·∫•t

                logger.warning(
                    f"[DEBUG MODE] Simulating successful webhook for latest unpaid booking: {booking_to_update.booking_id}.")

                with transaction.atomic():
                    # Ch·ªâ t·∫°o b·∫£n ghi Payment n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i
                    if not Payment.objects.filter(booking=booking_to_update).exists():
                        new_payment_id = int(time.time())
                        Payment.objects.create(
                            payment_id=new_payment_id,
                            booking=booking_to_update,
                            payment_method='PayOS_Simulated',  # Ghi nh·∫≠n l√† t·ª´ gi·∫£ l·∫≠p
                            payment_date=timezone.now().date(),
                            amount=booking_to_update.total * 50,
                        )
                        logger.info(
                            f"[DEBUG MODE] Simulated payment record created for booking {booking_to_update.booking_id}.")
                        messages.success(request,
                                         f"[Test] ƒê∆°n h√†ng #{booking_to_update.booking_id} ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông x√°c nh·∫≠n.")
                    else:
                        logger.info(
                            f"[DEBUG MODE] Booking {booking_to_update.booking_id} already paid. No simulation needed.")

            except Booking.DoesNotExist:
                logger.error("[DEBUG MODE] Could not find any unpaid booking to simulate.")
                messages.warning(request, "Thanh to√°n th√†nh c√¥ng nh∆∞ng kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o ƒë·ªÉ c·∫≠p nh·∫≠t.")
            except Exception as e:
                logger.exception(f"[DEBUG MODE] Error during webhook simulation: {e}")
                messages.error(request, "L·ªói khi t·ª± ƒë·ªông c·∫≠p nh·∫≠t ƒë∆°n h√†ng.")

    # =======================================================================
    # === K·∫æT TH√öC BLOCK GI·∫¢ L·∫¨P ===
    # =======================================================================
    elif status_from_gateway == 'CANCELLED':
        messages.warning(request, "B·∫°n ƒë√£ h·ªßy phi√™n thanh to√°n.")
    elif code_from_gateway != '00':
        messages.error(request, f"Thanh to√°n kh√¥ng th√†nh c√¥ng (m√£ l·ªói: {code_from_gateway}).")

    # Lu√¥n hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng chung cho ng∆∞·ªùi d√πng n·∫øu status l√† PAID
    if status_from_gateway == 'PAID':
        messages.success(request, "Thanh to√°n th√†nh c√¥ng! Tr·∫°ng th√°i ƒë∆°n h√†ng s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau √≠t ph√∫t.")

    return redirect('my_bookings')

# ... (c√°c h√†m kh√°c gi·ªØ nguy√™n) ...

def payment_cancel_page(request):
    messages.info(request, "Phi√™n thanh to√°n ƒë√£ ƒë∆∞·ª£c h·ªßy.")
    return redirect('my_bookings')

# === PH·∫¶N T√çCH H·ª¢P CHATBOT (Gi·ªØ nguy√™n, kh√¥ng thay ƒë·ªïi) ===
# ... (To√†n b·ªô code chatbot c·ªßa b·∫°n ƒë∆∞·ª£c gi·ªØ nguy√™n ·ªü ƒë√¢y) ...
# 1. S·ª¨A ƒê·ªîI: H√†m truy xu·∫•t d·ªØ li·ªáu (Retrieval)
def find_relevant_hotels(user_query, max_results=3):
    """
    T√¨m ki·∫øm c√°c kh√°ch s·∫°n li√™n quan b·∫±ng c√°ch qu√©t c·∫£ th√¥ng tin Kh√°ch s·∫°n v√† Ph√≤ng.
    """
    # C√°c t·ª´ kh√≥a chung chung c·∫ßn b·ªè qua
    keywords_to_ignore = [
        "l√†", "c√≥", "gi√°", "bao", "nhi√™u", "m·ªôt", "cho", "t√¥i", "xem",
        "kh√°ch", "s·∫°n", "ph√≤ng", "·ªü", "t·∫°i", "t√¨m", "ki·∫øm"
    ]

    keywords = user_query.lower().split()
    meaningful_keywords = [kw for kw in keywords if len(kw) > 1 and kw not in keywords_to_ignore]

    if not meaningful_keywords:
        logger.info("Chatbot: No meaningful keywords found in query.")
        return []

    # --- B∆∞·ªõc 1: X√¢y d·ª±ng c√°c ƒëi·ªÅu ki·ªán t√¨m ki·∫øm ---
    hotel_query = Q()
    room_query = Q()

    for keyword in meaningful_keywords:
        # ƒêi·ªÅu ki·ªán t√¨m trong b·∫£ng Hotel
        hotel_query |= Q(name__icontains=keyword)
        hotel_query |= Q(address__icontains=keyword)
        hotel_query |= Q(description__icontains=keyword)

        # ƒêi·ªÅu ki·ªán t√¨m trong b·∫£ng Room
        room_query |= Q(room_type__icontains=keyword)
        room_query |= Q(description__icontains=keyword)

    # --- B∆∞·ªõc 2: Th·ª±c hi·ªán t√¨m ki·∫øm v√† thu th·∫≠p ID kh√°ch s·∫°n ---
    hotel_ids_found = set()

    try:
        # T√¨m c√°c kh√°ch s·∫°n kh·ªõp tr·ª±c ti·∫øp
        matched_hotels = Hotel.objects.filter(hotel_query)
        ids_from_hotel_match = matched_hotels.values_list('hotel_id', flat=True)
        hotel_ids_found.update(ids_from_hotel_match)
        logger.info(f"Chatbot: Found {len(ids_from_hotel_match)} hotel IDs from direct hotel search.")

        # T√¨m c√°c ph√≤ng kh·ªõp, sau ƒë√≥ l·∫•y ID kh√°ch s·∫°n c·ªßa ch√∫ng
        matched_rooms = Room.objects.filter(room_query).select_related('hotel')
        ids_from_room_match = matched_rooms.values_list('hotel__hotel_id', flat=True)
        hotel_ids_found.update(ids_from_room_match)
        logger.info(f"Chatbot: Found {len(ids_from_room_match)} hotel IDs from room search.")

    except Exception as e:
        logger.error(f"Error during chatbot data retrieval: {e}")
        return []

    if not hotel_ids_found:
        logger.info("Chatbot: No hotels found matching the query criteria.")
        return []

    # --- B∆∞·ªõc 3: L·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß c·ªßa c√°c kh√°ch s·∫°n ƒë√£ t√¨m ƒë∆∞·ª£c ---
    # D√πng list() ƒë·ªÉ c√≥ th·ªÉ slicing
    final_hotel_ids = list(hotel_ids_found)[:max_results]

    # L·∫•y c√°c ƒë·ªëi t∆∞·ª£ng Hotel cu·ªëi c√πng
    relevant_hotels = Hotel.objects.filter(hotel_id__in=final_hotel_ids)

    logger.info(f"Chatbot: Returning {relevant_hotels.count()} relevant hotels for context.")
    return relevant_hotels
# 2. S·ª¨A ƒê·ªîI: H√†m t·∫°o ng·ªØ c·∫£nh (Augmentation)
def create_hotel_context_for_gemini(hotels):
    if not hotels:
        return ""
    context_parts = ["D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë th√¥ng tin kh√°ch s·∫°n t·ª´ h·ªá th·ªëng c·ªßa ch√∫ng t√¥i c√≥ th·ªÉ li√™n quan ƒë·∫øn c√¢u h·ªèi c·ªßa b·∫°n:"]
    for i, hotel in enumerate(hotels):
        part = f"\n--- Kh√°ch s·∫°n {i + 1} ---\n"
        part += f"- T√™n: {hotel.name}\n"
        part += f"- ƒê·ªãa ch·ªâ: {hotel.address}\n"
        part += f"- M√¥ t·∫£: {hotel.description}\n"
        rooms = Room.objects.filter(hotel=hotel).order_by('price_per_night')[:3]
        if rooms:
            part += "- M·ªôt s·ªë lo·∫°i ph√≤ng c√≥ s·∫µn:\n"
            for room in rooms:
                price_str = f"{room.price_per_night:,.0f} VND/ƒë√™m".replace(",", ".")
                part += f"  + Lo·∫°i ph√≤ng '{room.room_type}': Gi√° {price_str}, d√†nh cho t·ªëi ƒëa {room.max_occupancy} ng∆∞·ªùi.\n"
        else:
            part += "- Hi·ªán ch∆∞a c√≥ th√¥ng tin v·ªÅ c√°c ph√≤ng t·∫°i kh√°ch s·∫°n n√†y.\n"
        context_parts.append(part)
    context_parts.append("\n\nVui l√≤ng s·ª≠ d·ª•ng th√¥ng tin tr√™n ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng m·ªôt c√°ch ch√≠nh x√°c v√† h·ªØu √≠ch. H√£y tr·∫£ l·ªùi nh∆∞ m·ªôt nh√¢n vi√™n t∆∞ v·∫•n ƒë·∫∑t ph√≤ng chuy√™n nghi·ªáp. N·∫øu kh√¥ng c√≥ th√¥ng tin ph√π h·ª£p, h√£y th√¥ng b√°o r·∫±ng b·∫°n kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu kh·ªõp v·ªõi y√™u c·∫ßu.")
    return "\n".join(context_parts)

# 3. S·ª¨A ƒê·ªîI: View x·ª≠ l√Ω chat (Generation)
@csrf_exempt
def gemini_chat_view(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            user_message = data.get('message')

            if not user_message:
                return JsonResponse({'error': 'No message provided'}, status=400)

            api_key = os.environ.get('GEMINI_API_KEY')
            if not api_key:
                logger.error("GEMINI_API_KEY not configured.")
                return JsonResponse({'error': 'AI service not configured.'}, status=500)

            relevant_hotels = find_relevant_hotels(user_message)
            hotel_context_for_llm = create_hotel_context_for_gemini(relevant_hotels)
            system_prompt = ("B·∫°n l√† m·ªôt tr·ª£ l√Ω AI t∆∞ v·∫•n ƒë·∫∑t ph√≤ng kh√°ch s·∫°n th√¥ng minh v√† th√¢n thi·ªán. "
                             "H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng m·ªôt c√°ch l·ªãch s·ª±, cung c·∫•p th√¥ng tin ch√≠nh x√°c d·ª±a tr√™n d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p. "
                             "N·∫øu kh√¥ng ch·∫Øc ch·∫Øn ho·∫∑c kh√¥ng c√≥ th√¥ng tin, h√£y n√≥i r√µ ƒëi·ªÅu ƒë√≥. "
                             "Lu√¥n ƒë·ªÅ c·∫≠p gi√° ph√≤ng v·ªõi ƒë∆°n v·ªã 'VND/ƒë√™m'.")

            final_prompt_parts = [system_prompt]
            if hotel_context_for_llm:
                final_prompt_parts.append(hotel_context_for_llm)
            final_prompt_parts.append(f"\nC√¢u h·ªèi t·ª´ kh√°ch h√†ng:\n{user_message}")
            final_prompt_for_gemini = "\n\n".join(final_prompt_parts)

            gemini_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={api_key}"
            payload = {"contents": [{"parts": [{"text": final_prompt_for_gemini}]}]}
            headers = {'Content-Type': 'application/json'}

            response = requests.post(gemini_url, headers=headers, json=payload, timeout=60)
            response.raise_for_status()
            response_data = response.json()

            ai_reply = "Xin l·ªói, t√¥i ch∆∞a th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n l√∫c n√†y."
            if 'candidates' in response_data and response_data['candidates']:
                ai_reply = response_data['candidates'][0]['content']['parts'][0]['text']
            elif 'promptFeedback' in response_data:
                block_reason = response_data.get('promptFeedback', {}).get('blockReason', 'Kh√¥ng r√µ')
                ai_reply = f"R·∫•t ti·∫øc, y√™u c·∫ßu c·ªßa b·∫°n kh√¥ng th·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω do ch√≠nh s√°ch n·ªôi dung (L√Ω do: {block_reason})."

            return JsonResponse({'reply': ai_reply.strip()})

        except json.JSONDecodeError:
            return JsonResponse({'error': 'Invalid JSON in request body.'}, status=400)
        except requests.exceptions.RequestException as e:
            logger.error(f"Gemini API request failed: {e}")
            return JsonResponse({'error': 'L·ªói k·∫øt n·ªëi ƒë·∫øn d·ªãch v·ª• AI.'}, status=502)
        except Exception as e:
            logger.exception(f"Unexpected error in gemini_chat_view: {e}")
            return JsonResponse({'error': 'ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën.'}, status=500)

    return JsonResponse({'error': 'Ch·ªâ ch·∫•p nh·∫≠n y√™u c·∫ßu POST.'}, status=405)