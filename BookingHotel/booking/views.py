from django.shortcuts import render, redirect
from django.http import HttpResponse
from .models import Hotel, User, Room, Booking, Payment, RoomPicture, Picture
from django.contrib import messages
from django.contrib.auth import logout
from .forms import SearchForm
from django.utils import timezone
from datetime import datetime
from django.core.paginator import Paginator #Ph√¢n trang home
from django.db.models import Max



def logout_view(request):
    logout(request)
    return redirect('home')


# ƒêƒÉng nh·∫≠p
def login_view(request):
    if request.method == 'POST':
        email = request.POST['email']
        password = request.POST['password']
        try:
            user = User.objects.get(email=email, password=password)
            request.session['user_id'] = user.user_id
            return redirect('home')
        except User.DoesNotExist:
            messages.error(request, "Sai th√¥ng tin ƒëƒÉng nh·∫≠p")
    return render(request, 'login.html')


# Trang ch·ªß - hi·ªán t·∫•t c·∫£ kh√°ch s·∫°n
def home(request):
    hotels = Hotel.objects.all()
    form = SearchForm(request.GET or None)

    if form.is_valid():
        keyword = form.cleaned_data.get('keyword', '').strip().lower()
        city = form.cleaned_data.get('city', '').strip().lower()

        # L·ªçc theo t√™n kh√°ch s·∫°n n·∫øu c√≥ keyword
        if keyword:
            hotels = hotels.filter(name__icontains=keyword)

        # L·ªçc theo th√†nh ph·ªë n·∫øu c√≥ city
        if city:
            filtered_hotels = []
            for hotel in hotels:
                parts = hotel.address.split(',')
                if len(parts) > 1 and parts[-1].strip().lower() == city:
                    filtered_hotels.append(hotel)
            hotels = filtered_hotels

    paginator = Paginator(hotels, 5)  # 5 kh√°ch s·∫°n m·ªói trang
    page_number = request.GET.get('page')
    hotels = paginator.get_page(page_number)

    return render(request, 'home.html', {
        'hotels': hotels,
        'form': form,
    })


#C√°c ph√≤ng trong kh√°ch s·∫°n
def hotel_detail(request, hotel_id):
    hotel = Hotel.objects.get(hotel_id=hotel_id)
    rooms = Room.objects.filter(hotel=hotel)
    pictures = Picture.objects.filter(hotel=hotel)

    return render(request, 'hotel_detail.html',
                  {'hotel': hotel, 'rooms': rooms,  'pictures': pictures })


# Th√¥ng tin ng∆∞·ªùi d√πng
def user_profile(request):
    user_id = request.session.get('user_id')
    user = User.objects.get(user_id=user_id)
    return render(request, 'profile.html', {'user': user})

# Chi ti·∫øt ph√≤ng
def room_detail(request, room_id):
    room = Room.objects.get(room_id=room_id)
    pictures = RoomPicture.objects.filter(room=room)
    return render(request, 'room_detail.html', {'room': room, 'pictures': pictures})

# ƒê·∫∑t ph√≤ng
def book_room(request, room_id):
    room = Room.objects.get(room_id=room_id)

    if request.method == 'POST':
        # L·∫•y ng√†y t·ª´ form
        check_in = request.POST.get('check_in')
        check_out = request.POST.get('check_out')

        # Ki·ªÉm tra ƒëƒÉng nh·∫≠p
        user_id = request.session.get('user_id')
        if not user_id:
            return redirect('login')

        user = User.objects.get(user_id=user_id)

        # Chuy·ªÉn th√†nh object date
        try:
            check_i = datetime.strptime(check_in, "%Y-%m-%d").date()
            check_o = datetime.strptime(check_out, "%Y-%m-%d").date()
        except ValueError:
            return render(request, 'book_room.html', {
                'room': room,
                'error': 'Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng ng√†y.'
            })

        # Ki·ªÉm tra logic ng√†y
        nights = (check_o - check_i).days
        if nights <= 0:
            return render(request, 'book_room.html', {
                'room': room,
                'error': 'Ng√†y tr·∫£ ph·∫£i sau ng√†y nh·∫≠n ph√≤ng.'
            })

        # Ki·ªÉm tra xem ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t trong kho·∫£ng ng√†y ƒë√≥ ch∆∞a
        overlap = Booking.objects.filter(
            room=room,
            check_in__lt=check_o,   # ng∆∞·ªùi kh√°c check_in tr∆∞·ªõc khi m√¨nh check_out
            check_out__gt=check_i   # ng∆∞·ªùi kh√°c check_out sau khi m√¨nh check_in
        ).exists()

        if overlap:
            messages.error(request, "‚ùå Ph√≤ng n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong kho·∫£ng th·ªùi gian b·∫°n ch·ªçn.")
            return redirect('room_detail', room_id=room.room_id)

        # T√≠nh t·ªïng ti·ªÅn
        total = room.price_per_night * nights

        # T·ª± sinh booking_id
        max_id = Booking.objects.aggregate(Max('booking_id'))['booking_id__max'] or 0
        new_id = max_id + 1

        # L∆∞u booking m·ªõi
        Booking.objects.create(
            booking_id=new_id,
            user=user,
            room=room,
            check_in=check_i,
            check_out=check_o,
            total=total
        )

        messages.success(request, "üéâ ƒê·∫∑t ph√≤ng th√†nh c√¥ng!")
        return redirect('my_bookings')

    return render(request, 'book_room.html', {'room': room})


# Xem c√°c ph√≤ng ƒë√£ ƒë·∫∑t
def my_bookings(request):
    user = User.objects.get(user_id=request.session.get('user_id'))
    bookings = Booking.objects.filter(user=user)
    return render(request, 'my_bookings.html', {'bookings': bookings})

# Thanh to√°n
def make_payment(request, booking_id):
    booking = Booking.objects.get(booking_id=booking_id)

    if request.method == 'POST':
        method = request.POST['payment_method']
        Payment.objects.create(
            booking=booking,
            payment_method=method,
            payment_date=timezone.now().date(),
            amount=booking.total
        )
        return redirect('my_bookings')

    return render(request, 'make_payment.html', {
        'booking': booking
    })
